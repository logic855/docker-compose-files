# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('slaveuser', 'slavepass')] # 'protocols' contains information about protocols which master will use for # communicating with slaves.  # You must define at least 'port' option that slaves could connect to your master # with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller


roblayton_com = GitPoller(
        project='roblayton_com',
        repourl='git://github.com/roblayton/roblayton-com.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

codeboxsystems_com = GitPoller(
        project='codeboxsystems_com',
        repourl='git://github.com/codeboxsystems/codeboxsystems-com.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

roblayton_doc = GitPoller(
        project='roblayton_doc',
        repourl='https://roblayton:pass@github.com/roblayton/roblayton-doc.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

c['change_source'] = [roblayton_com, codeboxsystems_com, roblayton_doc]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name='roblayton-full',
                            change_filter=filter.ChangeFilter(project='roblayton_com', branch='master'),
                            treeStableTimer=None,
                            builderNames=['roblayton.com']))
c['schedulers'].append(SingleBranchScheduler(
                            name='codebox-full',
                            change_filter=filter.ChangeFilter(project='codeboxsystems_com', branch='master'),
                            treeStableTimer=None,
                            builderNames=['codeboxsystems.com']))
c['schedulers'].append(SingleBranchScheduler(
                            name='roblayton-doc',
                            change_filter=filter.ChangeFilter(project='roblayton_doc', branch='master'),
                            treeStableTimer=None,
                            builderNames=['docs.roblayton.com']))
c['schedulers'].append(ForceScheduler(
                            name='force',
                            builderNames=['roblayton.com', 'codeboxsystems.com', 'docs.roblayton.com']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

roblayton_factory = BuildFactory()
# check out the source
roblayton_factory.addStep(Git(repourl='git://github.com/roblayton/roblayton-com.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
roblayton_factory.addStep(ShellCommand(command=['npm', 'install', '.'], name='npm'))
roblayton_factory.addStep(ShellCommand(command=['bower', 'install'], name='bower'))
roblayton_factory.addStep(ShellCommand(command=['grunt'], name='grunt'))
roblayton_factory.addStep(ShellCommand(command=['npm', 'install', '.'], name='npm_build', workdir='build/dist'))
roblayton_factory.addStep(ShellCommand(command=['rm', '-rf', '/home/rob/sites/roblayton.com'], name='deploy', workdir='build'))
roblayton_factory.addStep(ShellCommand(command=['mv', 'dist', '/home/rob/sites'], name='copy', workdir='build'))
roblayton_factory.addStep(ShellCommand(command=['mv', '/home/rob/sites/dist', '/home/rob/sites/roblayton.com'], name='rename', workdir='build'))
roblayton_factory.addStep(ShellCommand(command=['chmod', '-R', '775', '/home/rob/sites/roblayton.com'], name='permissions'))

codeboxsystems_factory = BuildFactory()
# check out the source
codeboxsystems_factory.addStep(Git(repourl='git://github.com/codeboxsystems/codeboxsystems-com.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
codeboxsystems_factory.addStep(ShellCommand(command=['npm', 'install', '.'], name='npm'))
codeboxsystems_factory.addStep(ShellCommand(command=['bower', 'install'], name='bower'))
codeboxsystems_factory.addStep(ShellCommand(command=['grunt'], name='grunt'))
codeboxsystems_factory.addStep(ShellCommand(command=['npm', 'install', '.'], name='npm_build', workdir='build/dist'))
codeboxsystems_factory.addStep(ShellCommand(command=['rm', '-rf', '/home/rob/sites/codeboxsystems.com'], name='deploy', workdir='build'))
codeboxsystems_factory.addStep(ShellCommand(command=['mv', 'dist', '/home/rob/sites'], name='copy', workdir='build'))
codeboxsystems_factory.addStep(ShellCommand(command=['mv', '/home/rob/sites/dist', '/home/rob/sites/codeboxsystems.com'], name='rename', workdir='build'))
codeboxsystems_factory.addStep(ShellCommand(command=['chmod', '-R', '775', '/home/rob/sites/codeboxsystems.com'], name='permissions'))

roblayton_doc_factory = BuildFactory()
# check out the source
roblayton_doc_factory.addStep(Git(repourl='https://roblayton:pass@github.com/roblayton/roblayton-doc.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
roblayton_doc_factory.addStep(ShellCommand(command=['make', 'html'], name='make', workdir='build'))
roblayton_doc_factory.addStep(ShellCommand(command=['rm', '-rf', '/home/rob/sites/docs.roblayton.com'], name='deploy', workdir='build'))
roblayton_doc_factory.addStep(ShellCommand(command=['mv', 'build', '/home/rob/sites/docs.roblayton.com'], name='copy', workdir='build'))
roblayton_doc_factory.addStep(ShellCommand(command=['chmod', '-R', '775', '/home/rob/sites/docs.roblayton.com'], name='permissions'))

from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].append(
    BuilderConfig(name='codeboxsystems.com',
      slavenames=['codebox'],
      factory=codeboxsystems_factory))

c['builders'].append(
    BuilderConfig(name='roblayton.com',
      slavenames=['codebox'],
      factory=roblayton_factory))

c['builders'].append(
    BuilderConfig(name='docs.roblayton.com',
      slavenames=['codebox'],
      factory=roblayton_doc_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('root','root')]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'ci.codeboxsystems.com'
c['titleURL'] = 'http://ci.codeboxsystems.com'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://localhost:8010/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
